import quopri
import opencontracts
from bs4 import BeautifulSoup
import email
import json

with opencontracts.enclave_backend() as enclave:

  enclave.print(f"Hello {enclave.user()}! Fiat Swap started running in the Enclave.")
  service = enclave.user_input("Type the name of the payment service: Venmo or PayPal?")
  seller = enclave.user_input(f"Please enter the {service} handle of the seller:")
  price = int(enclave.user_input("Please enter the transaction price in cents (as integer):"))
  message = enclave.user_input("Please enter the message the seller wants you to use in the transaction:").strip()
  secret = enclave.user_input("Please enter the secret generated by the seller:")

  offerID = enclave.keccak(seller, price, message, service, secret, types=('string', 'uint256', 'string', 'string', 'string'))
  warning = f"""
  The information you entered would produce the offerID:
  {'0x' + offerID.hex()}
  Before proceeding to make a payment, call weiOffered() to verify you will receive enough tokens.
  """
  enclave.print(warning)

  venmo_instructions = f"""
  1) Pay ${price/100} to {seller} and use the message '{message}'.
  2) Navigate to {seller}'s account page
  3) Go to the 'Between You' tab 
  4) Click the 'Submit' button on the right.
  """
  paypal_instructions = f"""
  1) Pay ${price/100} to {seller} and use the message '{message}'.
  2) Navigate to the 'Recent Activity' section on the home page and select your transaction
  3) Click the 'Submit' button on the right.
  """

  def venmo_parser(mhtml):
    mht_string = quopri.decodestring(mhtml.replace("=\n", "")).decode('latin-1')
    mhtml = email.message_from_string(mht_string)
    url = mhtml['Snapshot-Content-Location']
    target_url = f'https://account.venmo.com/u/{seller}'
    assert url == target_url, f"You hit 'Submit' on '{url}', but should do so on '{target_url}'."
    html = [_ for _ in mhtml.walk() if _.get_content_type() == "text/html"][0]
    parsed = BeautifulSoup(html.get_payload(decode=False))
    transactions = parsed.find_all(**{'data-testid': 'betweenYou-feed-container'})[0]
    transactions = transactions.findAll('div', {'class': lambda c: c and c.startswith('storyContent_')})
    transactions = map(lambda t: (t.text.strip(), t.findParent().findParent().findNextSibling().text.strip()), transactions)
    transactions = list(filter(lambda t: (t[0]==message) and t[1].startswith("- $"), transactions))
    payment = sum(map(lambda t: int(float(t[1][3:])*100), transactions))
    assert payment >= price, f"Found {len(transactions)} payments labeled '{message}', adding up to ${payment/100} which is too low."
    return payment

  def paypal_parser(mhtml):
    mht_string = quopri.decodestring(mhtml.replace("=\n", "")).decode('latin-1')
    mhtml = email.message_from_string(mht_string)
    html = [_ for _ in mhtml.walk() if _.get_content_type() == "text/html"][0]
    parsed = BeautifulSoup(html.get_payload(decode=False))
    txn_details = json.loads(parsed.findAll("div", {"id": 'js_transactionDetailsView'})[0]['data-details'])
    txn_seller = txn_details['p2pRedirect']['repeatTxn']['email']
    assert txn_seller == seller, f"Saved wrong transaction, seller but be "{txn_seller}", not {seller}!"
    total_amount = parsed.findAll("div", {"class": 'transactionNetAmount'})[0]
    payment_sign = total_amount.find_all("span", {"class": 'accessAid'})[0].text.strip()
    assert payment_sign == "negative", f"Payment was wrong sign ({payment_sign} instead of 'negative')"
    total_amount = total_amount.find("span", {"class": 'accessAid'}).nextSibling.strip().lstrip('$')
    message = parsed.findAll("dd", {"class": 'smallGray'})[0].text.strip()
    total_amount = int(float(total_amount)*100)
    assert total_amount >= price, f"Found PayPal transaction labeled '{message}', adding up to ${total_amount/100} which is too low."
    return total_amount

  if service == "Venmo":
    payment = enclave.interactive_session(url='https://venmo.com', parser=venmo_parser, instructions=venmo_instructions)
  elif service == "PayPal":
    payment = enclave.interactive_session(url='https://paypal.com/us/home', parser=paypal_parser, instructions=paypal_instructions)
  else:
    raise NotImplementedError(f"Unknown payment service: {service}")
  enclave.print(f'Your total payment of ${payment/100} to {seller} was confirmed.')
  enclave.submit(enclave.user(), offerID, types=("address", "bytes32"), function_name="buyTokens")
