import opencontracts
from bs4 import BeautifulSoup

with opencontracts.session() as session:

  session.print(f"Hello {session.user()}! Fiat Swap started running in the Enclave.")
  seller = session.user_input("Please enter the Venmo/CashApp handle of the seller:")
  price = int(session.user_input("Please enter the transaction price in cents (as integer):"))
  message = session.user_input("Please enter the message the seller wants you to use in the transaction:").strip()
  # service = "Venmo"   # allow user to input one of multiple options in the future
  service = session.user_input("Please enter the payment service the seller wants to use (currently only supports 'Venmo' and 'CashApp'):").strip()
  assert service.lower() in ["venmo", "cashapp"], "invalid service, not in ['Venmo', 'CashApp']"
  if service.lower() == 'cashapp':
    assert seller[0].startswith('$'), "CashApp seller tag is expected to start with '$' character"
  secret = session.user_input("Please enter the secret generated by the seller:")

  offerID = session.keccak(seller, price, message, service, secret, types=('string', 'uint256', 'string', 'string', 'string'))
  warning = f"""
  The information you entered would produce the offerID:
  {'0x' + offerID.hex()}.
  Before proceeding to make a payment, call `amountOffered` to verify you will receive enough tokens.
  """
  session.print(warning)

  venmo_instructions = f"""
  1) Pay ${price/100} to {seller} and use the message '{message}'.
  2) Navigate to {seller}'s account page
  3) Go to the 'Between You' tab 
  4) Click the 'Submit' button on the right.
  """

  cashapp_instructions = f"""
  1) Pay ${price/100} to {seller} and use the message '{message}'.
  2) Navigate to your account page
  3) Click on the transaction you just made to the seller to expand the detail card"
  4) Click the 'Submit' button on the right.
  """
  def venmo_parser(url, html):
    target_url = f'https://account.venmo.com/u/{seller}'
    assert url == target_url, f"You hit 'Submit' on '{url}', but should do so on '{target_url}'."
    parsed = BeautifulSoup(html)
    transactions = parsed.find(**{'data-testid' :'betweenYou-feed-container'})
    transactions = transactions.findAll('div', {'class': lambda c: c and c.startswith('storyContent_')})
    transactions = map(lambda t: (t.text.strip(), t.findParent().findParent().findNextSibling().text.strip()), transactions)
    transactions = list(filter(lambda t: (t[0]==message) and t[1].startswith("- $"), transactions))
    payment = sum(map(lambda t: int(float(t[1][3:])*100), transactions))
    assert payment >= price, f"Found {len(transactions)} payments labeled '{message}', adding up to ${payment/100} which is too low."
    return payment


  def cashapp_parser(url, html):
    target_url = 'https://cash.app/account/activity'
    assert url == target_url, f"You hit 'Submit' on '{url}', but should do so on '{target_url}'."
    parsed = BeautifulSoup(html)
    receipt_card = parsed.find("div", {"class": "receipt-card-wrapper"})
    assert receipt_card.find("p", {"class": "receipt-status"}).string.strip().lower() == "received", "Check that transaction was received and not invalid"
    detail = receipt_card.find("div", {"class": "receipt-amount"})
    txn_details = detail.find_all("li", {"class": "detail-view-content-item"})
    assert len(txn_details) == 2, "Transaction details didn't contain necessary information, may be missing message: {}. Got: {}".format(
            message, [x.string for x in txn_details])
    txn_message, txn_date = [x.string for x in txn_details]
    assert txn_message.strip() == message, f"Transaction message did not match: {txn_message}. Got: {message}"
    txn_seller = receipt_card.find("div", {"class": "cashtag"}).string.lstrip("Payment to ")
    assert seller == txn_seller, f"Expected seller name of transaction to be: {seller}, got: {txn_seller}"
    payment = detail.find('h1', {'class': 'amount-treatment-standard'}).string
    assert payment >= price, f"Found payment labeled '{message}', adding up to ${payment/100} which is too low."
    return payment


  if service.lower() == "venmo":
    payment = session.interactive_browser('https://venmo.com/account/sign-in', venmo_parser, venmo_instructions)
  elif service.lower() == "cashapp":
    payment = session.interactive_browser('https://cash.app/login', cashapp_parser, cashapp_instructions)
  session.print(f'Your total payment of ${payment/100} to {seller} was confirmed.')
  session.submit(session.user(), offerID, types=("address", "bytes32"), function_name="buyTokens")
